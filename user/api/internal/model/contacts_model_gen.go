// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"

	"time"

	"gorm.io/gorm"
)

type (
	contactsModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *Contacts) error

		FindOne(ctx context.Context, id int64) (*Contacts, error)
		Update(ctx context.Context, tx *gorm.DB, data *Contacts) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultContactsModel struct {
		conn  *gorm.DB
		table string
	}

	Contacts struct {
		Id        int64          `gorm:"column:id"`
		OwnerId   int64          `gorm:"column:owner_id"`
		ContactId int64          `gorm:"column:contact_id"`
		CreatedAt time.Time      `gorm:"column:created_at"`
		UpdatedAt sql.NullTime   `gorm:"column:updated_at"`
		DeletedAt gorm.DeletedAt `gorm:"column:deleted_at;index"`
	}
)

func (Contacts) TableName() string {
	return "`contacts`"
}

func newContactsModel(conn *gorm.DB) *defaultContactsModel {
	return &defaultContactsModel{
		conn:  conn,
		table: "`contacts`",
	}
}

func (m *defaultContactsModel) Insert(ctx context.Context, tx *gorm.DB, data *Contacts) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Create(&data).Error
	return err
}

func (m *defaultContactsModel) FindOne(ctx context.Context, id int64) (*Contacts, error) {
	var resp Contacts
	err := m.conn.WithContext(ctx).Model(&Contacts{}).Where("`id` = ?", id).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gorm.ErrRecordNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultContactsModel) Update(ctx context.Context, tx *gorm.DB, data *Contacts) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(data).Error
	return err
}

func (m *defaultContactsModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Delete(&Contacts{}, id).Error

	return err
}

func (m *defaultContactsModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.conn.WithContext(ctx).Transaction(fn)
}
